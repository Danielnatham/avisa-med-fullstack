package br.ufs.avisamed.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OcorrenciaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOcorrenciaAllPropertiesEquals(Ocorrencia expected, Ocorrencia actual) {
        assertOcorrenciaAutoGeneratedPropertiesEquals(expected, actual);
        assertOcorrenciaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOcorrenciaAllUpdatablePropertiesEquals(Ocorrencia expected, Ocorrencia actual) {
        assertOcorrenciaUpdatableFieldsEquals(expected, actual);
        assertOcorrenciaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOcorrenciaAutoGeneratedPropertiesEquals(Ocorrencia expected, Ocorrencia actual) {
        assertThat(expected)
            .as("Verify Ocorrencia auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOcorrenciaUpdatableFieldsEquals(Ocorrencia expected, Ocorrencia actual) {
        assertThat(expected)
            .as("Verify Ocorrencia relevant properties")
            .satisfies(e -> assertThat(e.getIdSolicitante()).as("check idSolicitante").isEqualTo(actual.getIdSolicitante()))
            .satisfies(e -> assertThat(e.getIdDepartamento()).as("check idDepartamento").isEqualTo(actual.getIdDepartamento()))
            .satisfies(e -> assertThat(e.getDataCriacao()).as("check dataCriacao").isEqualTo(actual.getDataCriacao()))
            .satisfies(e -> assertThat(e.getDataResolucao()).as("check dataResolucao").isEqualTo(actual.getDataResolucao()))
            .satisfies(e -> assertThat(e.getTitulo()).as("check titulo").isEqualTo(actual.getTitulo()))
            .satisfies(e -> assertThat(e.getDescricao()).as("check descricao").isEqualTo(actual.getDescricao()))
            .satisfies(e -> assertThat(e.getImagem()).as("check imagem").isEqualTo(actual.getImagem()))
            .satisfies(e -> assertThat(e.getSituacao()).as("check situacao").isEqualTo(actual.getSituacao()))
            .satisfies(e -> assertThat(e.getComplexidade()).as("check complexidade").isEqualTo(actual.getComplexidade()))
            .satisfies(e -> assertThat(e.getProtocolo()).as("check protocolo").isEqualTo(actual.getProtocolo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOcorrenciaUpdatableRelationshipsEquals(Ocorrencia expected, Ocorrencia actual) {
        assertThat(expected)
            .as("Verify Ocorrencia relationships")
            .satisfies(
                e -> assertThat(e.getCidadaoIdentificado()).as("check cidadaoIdentificado").isEqualTo(actual.getCidadaoIdentificado())
            )
            .satisfies(e -> assertThat(e.getDepartamento()).as("check departamento").isEqualTo(actual.getDepartamento()))
            .satisfies(e -> assertThat(e.getEquipe()).as("check equipe").isEqualTo(actual.getEquipe()));
    }
}
