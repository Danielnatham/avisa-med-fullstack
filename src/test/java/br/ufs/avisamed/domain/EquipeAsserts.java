package br.ufs.avisamed.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EquipeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEquipeAllPropertiesEquals(Equipe expected, Equipe actual) {
        assertEquipeAutoGeneratedPropertiesEquals(expected, actual);
        assertEquipeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEquipeAllUpdatablePropertiesEquals(Equipe expected, Equipe actual) {
        assertEquipeUpdatableFieldsEquals(expected, actual);
        assertEquipeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEquipeAutoGeneratedPropertiesEquals(Equipe expected, Equipe actual) {
        assertThat(expected)
            .as("Verify Equipe auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEquipeUpdatableFieldsEquals(Equipe expected, Equipe actual) {
        assertThat(expected)
            .as("Verify Equipe relevant properties")
            .satisfies(e -> assertThat(e.getIdOcorrencia()).as("check idOcorrencia").isEqualTo(actual.getIdOcorrencia()))
            .satisfies(e -> assertThat(e.getIdG()).as("check idG").isEqualTo(actual.getIdG()))
            .satisfies(e -> assertThat(e.getDataAtribuicao()).as("check dataAtribuicao").isEqualTo(actual.getDataAtribuicao()))
            .satisfies(e -> assertThat(e.getDataFinalizacao()).as("check dataFinalizacao").isEqualTo(actual.getDataFinalizacao()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEquipeUpdatableRelationshipsEquals(Equipe expected, Equipe actual) {
        assertThat(expected)
            .as("Verify Equipe relationships")
            .satisfies(e -> assertThat(e.getGestorDepartamento()).as("check gestorDepartamento").isEqualTo(actual.getGestorDepartamento()));
    }
}
